define(file, {int8, int8, string, bool});
define(retract_file, {int8});
define(valid_file, {int8, int8, string, bool});
define(fqpath, {int8, string});

/*
 * A file is "valid" if it hasn't been retracted, and either its
 * parent is valid, or it is the root of the tree (parent == 0).
 */
valid_file(FileId, FParentId, FName, IsDir) :-
    valid_file(FParentId, _, _, _),
    file(FileId, FParentId, FName, IsDir),
    notin retract_file(FileId);

valid_file(FileId, 0, FName, IsDir) :-
    file(FileId, 0, FName, IsDir),
    notin retract_file(FileId);

fqpath(FileId, FName) :-
    valid_file(FileId, 0, FName, IsDir),
    IsDir == true;

fqpath(FileId, ParentPath + FName) :-
    valid_file(FileId, FParentId, FName, false),
    fqpath(FParentId, ParentPath);

fqpath(FileId, ParentPath + FName + "/") :-
    valid_file(FileId, FParentId, FName, true),
    fqpath(FParentId, ParentPath);

file(1, 0, "/", true);
file(2, 1, "Bar", false);
file(3, 1, "Baz", true);
file(4, 1, "Bax", false);
file(5, 3, "xxx", true);
file(6, 3, "xyz", false);
file(7, 3, "zzz", false);
file(8, 1, "Qux", true);
file(9, 8, "f1", false);
file(10, 8, "f2", false);

\dump valid_file
\dump fqpath

retract_file(3);

\dump valid_file
\dump fqpath

retract_file(1);

\dump valid_file
\dump fqpath
